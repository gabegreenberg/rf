'use strict';

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _staticSiteGeneratorWebpackPlugin = require('static-site-generator-webpack-plugin');

var _staticSiteGeneratorWebpackPlugin2 = _interopRequireDefault(_staticSiteGeneratorWebpackPlugin);

var _extractTextWebpackPlugin = require('extract-text-webpack-plugin');

var _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);

var _webpackConfigurator = require('webpack-configurator');

var _webpackConfigurator2 = _interopRequireDefault(_webpackConfigurator);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require('debug')('gatsby:webpack-config');

var modifyWebpackConfig = void 0;
try {
  var gatsbyNodeConfig = _path2.default.resolve(process.cwd(), './gatsby-node.js');
  var nodeConfig = require(gatsbyNodeConfig);
  modifyWebpackConfig = nodeConfig.modifyWebpackConfig;
} catch (e) {
  if (e.code !== 'MODULE_NOT_FOUND') {
    console.log(e);
  }
}

module.exports = function (program, directory, stage) {
  var webpackPort = arguments.length <= 3 || arguments[3] === undefined ? 1500 : arguments[3];
  var routes = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];

  debug('Loading webpack config for stage "' + stage + '"');
  function output() {
    switch (stage) {
      case 'develop':
        return {
          path: directory,
          filename: 'bundle.js',
          publicPath: 'http://' + program.host + ':' + webpackPort + '/'
        };
      case 'static':
        return {
          path: directory + '/public',
          filename: 'bundle.js',
          libraryTarget: 'umd'
        };
      case 'production':
        return {
          filename: 'bundle.js',
          path: directory + '/public'
        };
      default:
        throw new Error('The state requested ' + stage + ' doesn\'t exist.');
    }
  }

  function entry() {
    switch (stage) {
      case 'develop':
        return [require.resolve('webpack-hot-middleware/client'), __dirname + '/web-entry'];
      case 'production':
        return [__dirname + '/web-entry'];
      case 'static':
        return [__dirname + '/static-entry'];
      default:
        throw new Error('The state requested ' + stage + ' doesn\'t exist.');
    }
  }

  function plugins() {
    switch (stage) {
      case 'develop':
        return [new _webpack2.default.optimize.OccurenceOrderPlugin(), new _webpack2.default.HotModuleReplacementPlugin(), new _webpack2.default.NoErrorsPlugin(), new _webpack2.default.DefinePlugin({
          'process.env': {
            NODE_ENV: JSON.stringify(process.env.NODE_ENV ? process.env.NODE_ENV : 'development')
          },
          __PREFIX_LINKS__: program.prefixLinks
        })];
      case 'production':
        return [
        // Moment.js includes 100s of KBs of extra localization data
        // by default in Webpack that most sites don't want.
        // This line disables that.
        new _webpack2.default.IgnorePlugin(/^\.\/locale$/, /moment$/), new _webpack2.default.DefinePlugin({
          'process.env': {
            NODE_ENV: JSON.stringify(process.env.NODE_ENV ? process.env.NODE_ENV : 'production')
          },
          __PREFIX_LINKS__: program.prefixLinks
        }), new _webpack2.default.optimize.DedupePlugin(), new _extractTextWebpackPlugin2.default('styles.css'), new _webpack2.default.optimize.UglifyJsPlugin()];
      case 'static':
        return [new _staticSiteGeneratorWebpackPlugin2.default('bundle.js', routes), new _webpack2.default.DefinePlugin({
          'process.env': {
            NODE_ENV: JSON.stringify(process.env.NODE_ENV ? process.env.NODE_ENV : 'production')
          },
          __PREFIX_LINKS__: program.prefixLinks
        })];
      default:
        throw new Error('The state requested ' + stage + ' doesn\'t exist.');
    }
  }

  function resolve() {
    return {
      extensions: ['', '.js', '.jsx', '.cjsx', '.coffee', '.json', '.less', '.css', '.scss', '.sass', '.toml', '.yaml'],
      modulesDirectories: [directory, __dirname + '/../isomorphic', directory + '/node_modules', 'node_modules']
    };
  }

  function devtool() {
    switch (stage) {
      case 'develop':
        return 'eval';
      case 'static':
        return false;
      case 'production':
        return 'source-map';
      default:
        return false;
    }
  }

  function module(config) {
    // common config for every env
    config.loader('cjsx', {
      test: /\.cjsx$/,
      loaders: ['coffee', 'cjsx']
    });
    config.loader('js', {
      test: /\.jsx?$/, // Accept either .js or .jsx files.
      exclude: /(node_modules|bower_components)/,
      loader: 'babel',
      query: {
        plugins: ['add-module-exports']
      }
    });
    config.loader('coffee', {
      test: /\.coffee$/,
      loader: 'coffee'
    });
    config.loader('md', {
      test: /\.md$/,
      loader: 'markdown'
    });
    config.loader('html', {
      test: /\.html$/,
      loader: 'html'
    });
    config.loader('json', {
      test: /\.json$/,
      loaders: ['json']
    });
    // Match everything except config.toml
    config.loader('toml', {
      test: /^((?!config).)*\.toml$/,
      loaders: ['toml']
    });
    config.loader('yaml', {
      test: /\.yaml/,
      loaders: ['json', 'yaml']
    });
    config.loader('png', {
      test: /\.png$/,
      loader: 'null'
    });
    config.loader('jpg', {
      test: /\.jpg$/,
      loader: 'null'
    });
    config.loader('gif', {
      test: /\.gif$/,
      loader: 'null'
    });
    config.loader('ico', {
      test: /\.ico$/,
      loader: 'null'
    });
    config.loader('pdf', {
      test: /\.pdf$/,
      loader: 'null'
    });
    config.loader('txt', {
      test: /\.txt$/,
      loader: 'null'
    });
    config.loader('config', {
      test: /config\.toml/,
      loader: 'config',
      query: {
        directory: directory
      }
    });
    // Font loaders
    config.loader('woff', {
      test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
      loader: 'url-loader?limit=10000&minetype=application/font-woff'
    });
    config.loader('ttf', {
      test: /\.(ttf)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
      loader: 'file-loader'
    });
    config.loader('eot', {
      test: /\.(eot)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
      loader: 'file-loader'
    });
    config.loader('svg', {
      test: /\.(svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
      loader: 'file-loader'
    });

    switch (stage) {
      case 'develop':
        config.loader('css', {
          test: /\.css$/,
          loaders: ['style', 'css', 'postcss']
        });
        config.loader('less', {
          test: /\.less/,
          loaders: ['style', 'css', 'less']
        });
        config.loader('sass', {
          test: /\.(sass|scss)/,
          loaders: ['style', 'css', 'sass']
        });
        config.merge({
          postcss: [require('postcss-import')(), require('postcss-cssnext')({ browsers: 'last 2 versions' }), require('postcss-browser-reporter'), require('postcss-reporter')]
        });
        config.removeLoader('js');
        config.loader('js', {
          test: /\.jsx?$/, // Accept either .js or .jsx files.
          exclude: /(node_modules|bower_components)/,
          loader: 'babel',
          query: {
            presets: ['react-hmre', 'react', 'es2015', 'stage-1'],
            plugins: ['add-module-exports']
          }
        });
        return config;

      case 'static':
        config.loader('css', {
          test: /\.css$/,
          loaders: ['css']
        });
        config.loader('less', {
          test: /\.less/,
          loaders: ['css', 'less']
        });
        config.loader('sass', {
          test: /\.(sass|scss)/,
          loaders: ['css', 'sass']
        });
        return config;

      case 'production':
        config.loader('css', {
          test: /\.css$/,
          loader: _extractTextWebpackPlugin2.default.extract(['css', 'postcss'])
        });
        config.loader('less', {
          test: /\.less/,
          loader: _extractTextWebpackPlugin2.default.extract(['css', 'less'])
        });
        config.loader('sass', {
          test: /\.(sass|scss)/,
          loader: _extractTextWebpackPlugin2.default.extract(['css', 'sass'])
        });
        config.merge({
          postcss: [require('postcss-import')(), require('postcss-cssnext')({
            browsers: 'last 2 versions'
          }), require('cssnano')({
            autoprefixer: false
          })]
        });
        return config;

      default:
        return config;
    }
  }

  var config = new _webpackConfigurator2.default();

  config.merge({
    context: directory + '/pages',
    node: {
      __filename: true
    },
    entry: entry(),
    debug: true,
    devtool: devtool(),
    output: output(),
    resolveLoader: {
      modulesDirectories: [directory + '/node_modules', directory + '/loaders', __dirname + '/../../node_modules', __dirname + '/../loaders']
    },
    plugins: plugins(),
    resolve: resolve()
  });

  if (modifyWebpackConfig) {
    return modifyWebpackConfig(module(config), stage);
  } else {
    return module(config);
  }
};